import { useState } from "react";
import jsPDF from "jspdf";
import "jspdf-autotable";
import axios from "axios";
import companyLogo from "../../../src/assets/HOPE.png";

function ReportGeneratorButton() {
  const [isGenerating, setIsGenerating] = useState(false);

  const handleGenerateReport = async () => {
    setIsGenerating(true);

    try {
      const response = await axios.get(`http://localhost:5000/session`);
      console.log("API Response:", response.data);
      const sessionData = response.data;

      if (!sessionData || !Array.isArray(sessionData)) {
        console.error("Session data is not an array:", sessionData);
        alert("No session data available.");
        setIsGenerating(false);
        return;
      }

      generatePDF(sessionData);
    } catch (error) {
      console.error("Error fetching session data:", error);
      alert("Failed to fetch session data.");
    } finally {
      setIsGenerating(false);
    }
  };

  const generatePDF = (data: any[]) => {
    const doc = new jsPDF();
    const tableRows = data.map((session) => [
      session.title,
      session.instructorId,
      session.groupIds.join(", "),
      formatDate(session.date),
      session.startTime,
      session.duration,
    ]);

    const margin = 14;
    const logoWidth = 30;
    const logoHeight = 20;
    const maxWidth = 290;

    const textLines = doc.splitTextToSize(
      `This report contains session data for all available sessions. It includes details such as session title, instructor ID, group IDs, date, start time, duration, quality check result, and any recorded issues.`,
      maxWidth
    );
    const textParagraph = textLines.join("\n");

    doc.addImage(
      companyLogo,
      "PNG",
      doc.internal.pageSize.width - margin - logoWidth,
      margin,
      logoWidth,
      logoHeight
    );
    doc
      .setFontSize(10)
      .setFont("helvetica")
      .text("Hope", margin, margin + 10);
    doc.text("shehanwickramasooriya05@gmail.com", margin, margin + 20);
    doc.text(formatDate(new Date().toString()), margin, margin + 30);

    doc
      .setFontSize(20)
      .setTextColor(56, 119, 91)
      .setFont("helvetica", "bold")
      .text("Session Report", margin, 70);
    doc
      .setFontSize(10)
      .setFont("helvetica", "normal")
      .setTextColor(0, 0, 0)
      .text(textParagraph, margin, 80, { maxWidth });

    (doc as any).autoTable({
      head: [
        [
          "Title",
          "Instructor ID",
          "Group IDs",
          "Date",
          "Start Time",
          "Duration",
        ],
      ],
      body: tableRows,
      startY: 100,
      headStyles: { fillColor: [31, 41, 55] },
    });

    doc
      .setFontSize(10)
      .setTextColor(200, 200, 200)
      .text(
        `Report generated by Session Management System`,
        margin,
        doc.internal.pageSize.height - 10
      );
    doc.save(`SessionReport.pdf`);
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    const year = date.getFullYear();
    let month = (1 + date.getMonth()).toString().padStart(2, "0");
    let day = date.getDate().toString().padStart(2, "0");
    return `${year}-${month}-${day}`;
  };

  return (
    <>
      <button
        onClick={handleGenerateReport}
        className={`btn btn-primary bg-new-blue hover:bg-white-content text-white text-bold px-6 py-2 rounded-md mb-4 w-full ${
          isGenerating ? "opacity-50 cursor-not-allowed" : ""
        }`}
        disabled={isGenerating}
      >
        {isGenerating ? "Generating..." : "Generate Reports"}
      </button>
    </>
  );
}

export default ReportGeneratorButton;
