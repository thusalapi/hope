import React from "react";
import { useMutation } from "@tanstack/react-query";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import { generateReport } from "../../services/reportApi";
import { Button } from "@/components/ui/button";
import { IconButton, Tooltip } from "@mui/material";
import DescriptionIcon from "@mui/icons-material/Description";
import companyLogo from "../../../src/assets/HOPE.png";

const ReportButton: React.FC = () => {
  const mutation = useMutation({
    mutationFn: () => generateReport(),
    onSuccess: (data) => {
      const pdf = new jsPDF();

      // Add logo
      const margin = 14;
      const logoWidth = 30;
      const logoHeight = 20;
      pdf.addImage(
        companyLogo,
        "PNG",
        pdf.internal.pageSize.width - margin - logoWidth,
        margin,
        logoWidth,
        logoHeight
      );

      // Add company details
      pdf.setFontSize(10);
      pdf.setFont("helvetica");
      pdf.text("Hope", margin, margin + 10);
      pdf.text("thusalapi@gmail.com", margin, margin + 20);
      pdf.text(formatDate(new Date().toString()), margin, margin + 30);

      // Add title
      pdf.setFontSize(20);
      pdf.setTextColor(33, 72, 192); // #2148C0
      pdf.setFont("helvetica", "bold");
      pdf.text("Session Report", margin, 70);

      // Add description
      const maxWidth = 400;
      const textLines = pdf.splitTextToSize(
        `This report contains session data for all available sessions. It includes details such as session title, instructor ID, group IDs, date, start time, duration, quality check result, any recorded issues, and the total number of students and instructors in the system.`,
        maxWidth
      );
      pdf.setFontSize(10);
      pdf.setFont("helvetica", "normal");
      pdf.setTextColor(0, 0, 0);
      pdf.text(textLines, margin, 80, { maxWidth });

      // Add summary table
      autoTable(pdf, {
        head: [["Category", "Count"]],
        body: [
          ["Students", data.studentCount.toString()],
          ["Instructors", data.instructorCount.toString()],
        ],
        startY: 100,
        theme: "grid",
        headStyles: { fillColor: [31, 41, 55], textColor: 255 },
        alternateRowStyles: { fillColor: [240, 248, 255] },
      });

      // Add session data table
      if (data.sessions && Array.isArray(data.sessions)) {
        const tableRows = data.sessions.map((session: any) => [
          session.title,
          session.instructorId,
          session.groupIds.join(", "),
          formatDate(session.date),
          session.startTime,
          session.duration,
        ]);

        autoTable(pdf, {
          head: [
            [
              "Title",
              "Instructor ID",
              "Group IDs",
              "Date",
              "Start Time",
              "Duration",
            ],
          ],
          body: tableRows,
          startY: (pdf as any).autoTable.previous.finalY + 10,
          headStyles: { fillColor: [31, 41, 55] },
        });
      }

      // Footer
      pdf.setFontSize(10);
      pdf.setTextColor(200, 200, 200);
      pdf.text(
        `Report generated by Session Management System`,
        margin,
        pdf.internal.pageSize.height - 10
      );

      pdf.save("useranalysics.pdf");
    },
  });

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    const year = date.getFullYear();
    let month = (1 + date.getMonth()).toString().padStart(2, "0");
    let day = date.getDate().toString().padStart(2, "0");
    return `${year}-${month}-${day}`;
  };

  return (
    <Tooltip title="Generate Report">
      <IconButton onClick={() => mutation.mutate()}>
        <DescriptionIcon />
      </IconButton>
    </Tooltip>
  );
};

export default ReportButton;
